from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import random
import csv
import asyncio
import os, sys
from collections import defaultdict

# –ü—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
INGREDIENTS_POOL = [
    "–î–≤–æ–π–Ω–æ–µ —è–±–ª–æ–∫–æ",       # –ö–ª–∞—Å—Å–∏–∫–∞, —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–∫—É—Å  
    "–ú—è—Ç–∞",                 # –û—Å–≤–µ–∂–∞—é—â–∏–π —Ö–∏—Ç  
    "–ê—Ä–±—É–∑",                # –õ–µ—Ç–Ω–∏–π —Ñ–∞–≤–æ—Ä–∏—Ç  
    "–î—ã–Ω—è",                 # –°–ª–∞–¥–∫–∏–π –∏ —Å–æ—á–Ω—ã–π  
    "–í–∏–Ω–æ–≥—Ä–∞–¥",             # –ß—ë—Ä–Ω—ã–π –∏–ª–∏ –∑–µ–ª—ë–Ω—ã–π  
    "–ü–µ—Ä—Å–∏–∫",               # –ù–µ–∂–Ω—ã–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤—ã–π  
    "–ê–Ω–∞–Ω–∞—Å",               # –¢—Ä–æ–ø–∏—á–µ—Å–∫–∞—è —Å–ª–∞–¥–æ—Å—Ç—å  
    "–ú–∞–Ω–≥–æ",                # –≠–∫–∑–æ—Ç–∏–∫–∞ ‚Ññ1  
    "–ö–ª—É–±–Ω–∏–∫–∞",             # –Ø–≥–æ–¥–Ω—ã–π must-have  
    "–ß–µ—Ä–Ω–∏–∫–∞",              # –° –ª—ë–≥–∫–æ–π –∫–∏—Å–ª–∏–Ω–∫–æ–π  
    "–õ–∏–º–æ–Ω",                # –î–ª—è –º–∏–∫—Å–æ–≤  
    "–õ–∞–π–º",                 # –û—Å—Ç—Ä—ã–π —Ü–∏—Ç—Ä—É—Å  
    "–ö–æ–∫–æ—Å",                # –ö—Ä–µ–º–æ–≤—ã–π —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –≤–∫—É—Å  
    "–õ–∏—á–∏",                 # –í–æ—Å—Ç–æ—á–Ω–∞—è —ç–∫–∑–æ—Ç–∏–∫–∞  
    "–ì—É–∞–≤–∞",                # –ù–µ–æ–±—ã—á–Ω–æ-—Å–ª–∞–¥–∫–∏–π  
    "–ü–∏–Ω–∞ –∫–æ–ª–∞–¥–∞",          # –ê–Ω–∞–Ω–∞—Å + –∫–æ–∫–æ—Å  
    "–ö–æ–ª–∞",                 # –ì–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫  
    "–ú–æ—Ö–∏—Ç–æ",               # –ú—è—Ç–∞ + –ª–∞–π–º  
    "–®–æ–∫–æ–ª–∞–¥",              # –î–µ—Å–µ—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä  
    "–ö–∞—Ä–∞–º–µ–ª—å",             # –°–ª–∞–¥–∫–æ–µ–∂–∫–∞–º  
    "–í–∞–Ω–∏–ª—å",               # –ù–µ–∂–Ω—ã–π –∫—Ä–µ–º–æ–≤—ã–π –≤–∫—É—Å  
    "–ß–∏–∑–∫–µ–π–∫",              # –î–µ—Å–µ—Ä—Ç–Ω—ã–π —Ö–∏—Ç  
    "–ö–æ—Ä–∏—Ü–∞",               # –ü—Ä—è–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç  
    "–†–æ–∑–∞",                 # –¶–≤–µ—Ç–æ—á–Ω—ã–π –∞—Ä–æ–º–∞—Ç  
    "–õ–∞–≤–∞–Ω–¥–∞",             # –£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π –≤–∫—É—Å  
    "–û–≥—É—Ä–µ—Ü",              # –°–≤–µ–∂–∏–π –∏ –Ω–µ–æ–±—ã—á–Ω—ã–π  
    "–ß–∞–π –º–∞—Å–∞–ª–∞",          # –ü—Ä—è–Ω—ã–π —á–∞–π–Ω—ã–π –º–∏–∫—Å  
    "–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ",        # –ë–æ–≥–∞—Ç—ã–π –≤–∫—É—Å  
    "–ì—Ä–∞–Ω–∞—Ç",              # –° –∫–∏—Å–ª–∏–Ω–∫–æ–π  
    "–ú–∞–ª–∏–Ω–∞",              # –Ø—Ä–∫–∞—è —è–≥–æ–¥–∞  
    "–ê–ø–µ–ª—å—Å–∏–Ω",            # –¶–∏—Ç—Ä—É—Å–æ–≤—ã–π –∑–∞—Ä—è–¥  
    "–ú–∞–Ω–¥–∞—Ä–∏–Ω",            # –ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –≤–∫—É—Å  
    "–ì—Ä—É—à–∞",               # –ù–µ–∂–Ω–∞—è —Å–ª–∞–¥–æ—Å—Ç—å  
    "–ï–∂–µ–≤–∏–∫–∞",             # –ì–ª—É–±–æ–∫–∞—è —è–≥–æ–¥–Ω–∞—è –Ω–æ—Ç–∞  
    "–ú–∞—Ä–∞–∫—É–π—è",            # –¢—Ä–æ–ø–∏—á–µ—Å–∫–∞—è –∫–∏—Å–ª–∏–Ω–∫–∞  
    "–ö–∏–≤–∏",                # –ó–µ–ª—ë–Ω—ã–π –∏ —Å–≤–µ–∂–∏–π  
    "–í–∏—à–Ω—è",               # –ö–ª–∞—Å—Å–∏–∫–∞ —Å –≥–ª—É–±–∏–Ω–æ–π  
    "–û–±–ª–µ–ø–∏—Ö–∞",            # –ö–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–π –º–∏–∫—Å  
    "–§–µ–π—Ö–æ–∞",              # –≠–∫–∑–æ—Ç–∏–∫–∞  
    "–¢–∞–º–∞—Ä–∏–Ω–¥",            # –í–æ—Å—Ç–æ—á–Ω–∞—è —Å–ª–∞–¥–æ—Å—Ç—å  
]

MIX_DATABASE = {}
USER_DATABASE = {}
DATABASE_FILE = "mix_database.csv"
USER_DATABASE_FILE = "user_database.csv"
user_active = {}
user_mix_mode = defaultdict(lambda: 'random')  # 'random' –∏–ª–∏ 'top'

def load_database():
    if os.path.exists(DATABASE_FILE):
        with open(DATABASE_FILE, newline="", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                ingredients_set = frozenset(row["ingredients"].split(","))
                proportions = {kv.split(":")[0]: int(float(kv.split(":")[1])) for kv in row["proportions"].split(";")}
                MIX_DATABASE[ingredients_set] = {
                    "proportions": proportions,
                    "likes": int(row["likes"]),
                    "dislikes": int(row["dislikes"])
                }
    if os.path.exists(USER_DATABASE_FILE):
        with open(USER_DATABASE_FILE, newline="", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                user_id = int(row["user_id"])
                ingredients_set = frozenset(row["ingredients"].split(","))
                USER_DATABASE.setdefault(user_id, {})[ingredients_set] = {
                    "likes": int(row["likes"]),
                    "dislikes": int(row["dislikes"])
                }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–∞–ª—å—è–Ω–Ω—ã–π –º–∏–∫—Å!\n"
        "–ù–∞–∂–º–∏ /mix —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ /stop —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.\n"
        "–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/top - —Ç–æ–ø –º–∏–∫—Å–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
        "/mytop - –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –º–∏–∫—Å—ã\n"
        "/mytop_clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à —Ç–æ–ø\n"
        "/mytop_remove - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–∏–∫—Å—ã –∏–∑ –≤–∞—à–µ–≥–æ —Ç–æ–ø–∞"
    )

async def send_mix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_mix_mode[user_id] == 'top' and MIX_DATABASE:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∏–∫—Å—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –ª–∞–π–∫–æ–≤
        liked_mixes = [
            (ingredients, data) 
            for ingredients, data in MIX_DATABASE.items() 
            if data['likes'] > 0
        ]
        
        if liked_mixes:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è
            ingredients_set, mix_info = random.choice(liked_mixes)
            proportions = mix_info['proportions']
            user_mix_mode[user_id] = 'random'  # –°–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–∏–∫—Å–æ–≤ —Å –ª–∞–π–∫–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
            return await send_random_mix(update, context)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å
        return await send_random_mix(update, context)
    
    sorted_mix = sorted(proportions.items(), key=lambda x: x[1], reverse=True)
    mix_description = " | ".join(f"{ingredient} {percent}%" for ingredient, percent in sorted_mix)
    message = f"üî• –ü–û–ü–£–õ–Ø–†–ù–´–ô –ú–ò–ö–°: {mix_description}"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º callback_data
    ingredients_list = sorted(ingredients_set)
    keyboard = [
        [
            InlineKeyboardButton("üëç –ó–∞", callback_data=f'like:{"|".join(ingredients_list)}'),
            InlineKeyboardButton("üëé –ü—Ä–æ—Ç–∏–≤", callback_data=f'dislike:{"|".join(ingredients_list)}')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(message, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text(message, reply_markup=reply_markup)

async def send_random_mix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    selected_ingredients = random.sample(INGREDIENTS_POOL, 3)
    ingredients_set = frozenset(selected_ingredients)

    if ingredients_set in MIX_DATABASE:
        # –ï—Å–ª–∏ –º–∏–∫—Å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Ü–µ–Ω–æ–∫
        mix_info = MIX_DATABASE[ingredients_set]
        proportions = mix_info['proportions']
    else:
        # –î–ª—è –Ω–æ–≤–æ–≥–æ –º–∏–∫—Å–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        proportions_raw = random.sample(range(1, 10), 3)
        total = sum(proportions_raw)
        normalized = [round(p / total * 100, -1) for p in proportions_raw]
        diff = 100 - sum(normalized)
        if diff != 0:
            normalized[0] += diff
        proportions = {ingredient: percent for ingredient, percent in zip(selected_ingredients, normalized) if percent > 0}
        # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –º–∏–∫—Å –≤ –±–∞–∑—É —Å—Ä–∞–∑—É, –æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç –ª–∞–π–∫
        MIX_DATABASE[ingredients_set] = {"proportions": proportions, "likes": 0, "dislikes": 0}

    sorted_mix = sorted(proportions.items(), key=lambda x: x[1], reverse=True)
    mix_description = " | ".join(f"{ingredient} {percent}%" for ingredient, percent in sorted_mix)
    message = f"üé≤ –°–õ–£–ß–ê–ô–ù–´–ô –ú–ò–ö–°: {mix_description}"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º callback_data
    ingredients_list = sorted(ingredients_set)
    keyboard = [
        [
            InlineKeyboardButton("üëç –ó–∞", callback_data=f'like:{"|".join(ingredients_list)}'),
            InlineKeyboardButton("üëé –ü—Ä–æ—Ç–∏–≤", callback_data=f'dislike:{"|".join(ingredients_list)}')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(message, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    
    user_mix_mode[user_id] = 'top'  # –°–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç —Ç–æ–ø–æ–≤—ã–π

async def mix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_active[user_id] = True
    user_mix_mode[user_id] = 'random'  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ
    await send_mix(update, context)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_active[update.effective_user.id] = False
    await update.message.reply_text("üö´ –ú–∏–∫—Å–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏ /mix —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞!")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    print(f"–ü–æ–ª—É—á–µ–Ω callback_data: {data}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ like/dislike
    if data.startswith(('like:', 'dislike:')):
        action, ingredients_str = data.split(":", 1)
        ingredients = frozenset(ingredients_str.split("|"))
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {action} –¥–ª—è –º–∏–∫—Å–∞: {ingredients}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        if ingredients in MIX_DATABASE:
            if action == "like":
                MIX_DATABASE[ingredients]['likes'] += 1
            elif action == "dislike":
                MIX_DATABASE[ingredients]['dislikes'] += 1

            if user_id not in USER_DATABASE:
                USER_DATABASE[user_id] = {}
            if ingredients not in USER_DATABASE[user_id]:
                USER_DATABASE[user_id][ingredients] = {"likes": 0, "dislikes": 0}
            if action == "like":
                USER_DATABASE[user_id][ingredients]['likes'] += 1
            elif action == "dislike":
                USER_DATABASE[user_id][ingredients]['dislikes'] += 1

            print(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏: {MIX_DATABASE[ingredients]}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            current_text = query.message.text
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
            vote_text = "üëç –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!" if action == "like" else "üëé –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!"
            new_text = f"{current_text}\n\n{vote_text}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await query.edit_message_text(text=new_text)

            if user_active.get(user_id, False):
                # –ü–æ—Å–ª–µ –ª—é–±–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–∫—Å –∏–∑ —Ç–æ–ø–∞
                user_mix_mode[user_id] = 'top'
                await send_mix(update, context)
            return
        else:
            # –ï—Å–ª–∏ –º–∏–∫—Å –Ω–µ –≤ –±–∞–∑–µ –∏ —ç—Ç–æ –ª–∞–π–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if action == "like":
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∏–∫—Å–∞
                proportions_raw = random.sample(range(1, 10), 3)
                total = sum(proportions_raw)
                normalized = [round(p / total * 100, -1) for p in proportions_raw]
                diff = 100 - sum(normalized)
                if diff != 0:
                    normalized[0] += diff
                proportions = {ingredient: percent for ingredient, percent in zip(sorted(ingredients), normalized) if percent > 0}
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–∫—Å –≤ –±–∞–∑—É
                MIX_DATABASE[ingredients] = {"proportions": proportions, "likes": 1, "dislikes": 0}
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –±–∞–∑—É
                if user_id not in USER_DATABASE:
                    USER_DATABASE[user_id] = {}
                USER_DATABASE[user_id][ingredients] = {"likes": 1, "dislikes": 0}
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                current_text = query.message.text
                new_text = f"{current_text}\n\nüëç –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω! –ú–∏–∫—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É."
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                await query.edit_message_text(text=new_text)
                
                if user_active.get(user_id, False):
                    # –ü–æ—Å–ª–µ –ª—é–±–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–∫—Å –∏–∑ —Ç–æ–ø–∞
                    user_mix_mode[user_id] = 'top'
                    await send_mix(update, context)
                return
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏–∑–ª–∞–π–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∏–∫—Å–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                current_text = query.message.text
                new_text = f"{current_text}\n\nüëé –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!"
                await query.edit_message_text(text=new_text)
                
                if user_active.get(user_id, False):
                    # –ü–æ—Å–ª–µ –ª—é–±–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–∫—Å –∏–∑ —Ç–æ–ø–∞
                    user_mix_mode[user_id] = 'top'
                    await send_mix(update, context)
                return

        print(f"–ú–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {ingredients}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞: –º–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    if data == "rc":  # cancel_removal
        await query.edit_message_text(text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    if data == "ra":  # remove_all_mixes
        if user_id in USER_DATABASE:
            USER_DATABASE[user_id].clear()
            await query.edit_message_text(text="‚úÖ –í—Å–µ –≤–∞—à–∏ –º–∏–∫—Å—ã —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await query.edit_message_text(text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∏–∫—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    if data.startswith("rm:"):  # remove_mix
        mix_id = int(data.split(":", 1)[1])
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∏–∫—Å –ø–æ –µ–≥–æ ID
        for ingredients_set in list(USER_DATABASE[user_id].keys()):
            if hash(frozenset(ingredients_set)) % 10000 == mix_id:
                del USER_DATABASE[user_id][ingredients_set]
                ing_list = ", ".join(sorted(ingredients_set))
                await query.edit_message_text(text=f"‚úÖ –ú–∏–∫—Å '{ing_list}' —É–¥–∞–ª—ë–Ω.")
                return
        
        await query.edit_message_text(text="‚ùå –ú–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.")

async def save_database_periodically():
    while True:
        with open(DATABASE_FILE, "w", newline="", encoding="utf-8") as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(["ingredients", "proportions", "likes", "dislikes"])
            for ingredients_set, data in MIX_DATABASE.items():
                ingredients = ",".join(sorted(ingredients_set))
                proportions = ";".join(f"{k}:{int(v)}" for k, v in data['proportions'].items())
                writer.writerow([ingredients, proportions, data['likes'], data['dislikes']])

        with open(USER_DATABASE_FILE, "w", newline="", encoding="utf-8") as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(["user_id", "ingredients", "likes", "dislikes"])
            for user_id, mixes in USER_DATABASE.items():
                for ingredients_set, votes in mixes.items():
                    ingredients = ",".join(sorted(ingredients_set))
                    writer.writerow([user_id, ingredients, votes['likes'], votes['dislikes']])

        await asyncio.sleep(60)

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not MIX_DATABASE:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –º–∏–∫—Å–æ–≤ –≤ –±–∞–∑–µ.")
        return

    sorted_mixes = sorted(MIX_DATABASE.items(), key=lambda item: item[1]['likes'], reverse=True)
    top_text = "\n\n".join(
        f"{', '.join(sorted(mix[0]))}: {mix[1]['likes']} üëç / {mix[1]['dislikes']} üëé\n" +
        " | ".join(f"{ing} {perc}%" for ing, perc in sorted(mix[1]['proportions'].items(), key=lambda x: x[1], reverse=True))
        for mix in sorted_mixes[:5]
    )
    await update.message.reply_text(f"üî• –¢–æ–ø –º–∏–∫—Å–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n\n{top_text}")

async def mytop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in USER_DATABASE or not USER_DATABASE[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–∫—Å–æ–≤.")
        return

    user_mixes = USER_DATABASE[user_id]
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∏–∫—Å—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –¥–∏–∑–ª–∞–π–∫–æ–≤
    filtered_mixes = {
        ingredients: data 
        for ingredients, data in user_mixes.items() 
        if data['dislikes'] == 0
    }
    
    if not filtered_mixes:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–∫—Å–æ–≤.")
        return
    
    sorted_user_mixes = sorted(filtered_mixes.items(), key=lambda item: item[1]['likes'], reverse=True)
    
    top_text = "\n\n".join(
        f"{idx+1}. {', '.join(sorted(mix[0]))}: {mix[1]['likes']} üëç\n" +
        " | ".join(f"{ing} {perc}%" for ing, perc in sorted(MIX_DATABASE[mix[0]]['proportions'].items(), key=lambda x: x[1], reverse=True))
        for idx, mix in enumerate(sorted_user_mixes)
    )
    await update.message.reply_text(f"üë§ –í–∞—à–∏ –ª—é–±–∏–º—ã–µ –º–∏–∫—Å—ã:\n\n{top_text}\n\n"
                                  "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –º–∏–∫—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mytop_remove")

async def mytop_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in USER_DATABASE or not USER_DATABASE[user_id]:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–∫—Å–æ–≤.")
        return

    user_mixes = USER_DATABASE[user_id]
    sorted_user_mixes = sorted(user_mixes.items(), key=lambda item: item[1]['likes'], reverse=True)
    
    keyboard = []
    for idx, (ingredients_set, _) in enumerate(sorted_user_mixes):
        ingredients_list = sorted(ingredients_set)
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∏–∫—Å–∞
        mix_id = hash(frozenset(ingredients_set)) % 10000
        callback_data = f"rm:{mix_id}"
        ingredients_str = ", ".join(ingredients_list)
        btn_text = f"‚ùå {idx+1}. {ingredients_str[:20]}{'...' if len(ingredients_str) > 20 else ''}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="ra")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rc")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

def main():
    load_database()

    async def post_init(app):
        app.create_task(save_database_periodically())

    app = ApplicationBuilder().token(sys.argv[1]).post_init(post_init).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mix", mix))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("mytop", mytop))
    app.add_handler(CommandHandler("mytop_remove", mytop_remove))
    
    # –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button))

    app.run_polling()

if __name__ == '__main__':
    main()
